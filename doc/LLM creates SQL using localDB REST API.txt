LLM creates SQL using localDB connection using REST API

    Sub prompt1_answer_SQLLLM(ByVal Sender As Object, ByVal e As EventArgs)

        ' Define the database connection string
        Dim connectionString As String = "Driver={PostgreSQL Unicode};Server=localhost;Database=YOURDB;Uid=postgres;Pwd=PASS;"
        ' Define the OpenAI API URL and authorization token
        Dim url As String = "https://api.openai.com/v1/chat/completions"
        Dim authToken As String = "sk-YOURKEY"

        ' Define the question
        'Dim question1 As String = "how many employees are there?"
        Dim question1 As String = "compare gdp with education graduation rate for all states"
        ' Create the JSON content
        Dim jsonContent As String = "{
          ""model"": ""gpt-3.5-turbo"",
          ""messages"": [
            {
              ""role"": ""system"",
              ""content"": ""You are a helpful assistant that converts natural language questions into SQL queries.""
            },
            {
              ""role"": ""user"",
              ""content"": """ & question1 & """
            }
          ],
          ""max_tokens"": 100
        }"

        ' Create a web request
        Dim request As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)
        request.Method = "POST"
        request.ContentType = "application/json"
        request.Headers("Authorization") = "Bearer " & authToken

        ' Write the JSON content to the request stream
        Using streamWriter As New StreamWriter(request.GetRequestStream())
            streamWriter.Write(jsonContent)
            streamWriter.Flush()
            streamWriter.Close()
        End Using

        ' Get the response
        Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)
        Using streamReader As New StreamReader(response.GetResponseStream())
            Dim result As String = streamReader.ReadToEnd()
            fld_spo_text.Text = result
            Console.WriteLine(result)
        End Using

        ' Connect to the PostgreSQL database and execute a query
        Using connection As New OdbcConnection(connectionString)
            Try
                connection.Open()
                Dim command As New OdbcCommand("SELECT example_questions FROM example_questions", connection)
                Dim reader As OdbcDataReader = command.ExecuteReader()
                While reader.Read()
                    fld_spo_text_out.Text = reader("example_questions").ToString()
                    Console.WriteLine(reader("example_questions").ToString())
                End While

            Catch ex As OdbcException
                fld_spo_text_out.Text = "ODBC Error: " & ex.Message
                Console.WriteLine("ODBC Error: " & ex.Message)
            Catch ex As Exception
                fld_spo_text_out.Text = "Error: " & ex.Message
                Console.WriteLine("Error: " & ex.Message)
            End Try
        End Using

    End Sub

The following is the result from the above query
{
  "id": "chatcmpl-BdHmxCu2Ob62hl9X8qwIH1yj69xIm",
  "object": "chat.completion",
  "created": 1748702871,
  "model": "gpt-3.5-turbo-0125",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "I assume you want to compare GDP (Gross Domestic Product) with education graduation rate for all states in the United States. To achieve this, we can retrieve data from two different tables: one for GDP and one for education graduation rate. Here is an example SQL query to compare these two metrics:\n\n```sql\nSELECT gdp.state_name, gdp.gdp_value, education.graduation_rate\nFROM gdp\nJOIN education ON gdp.state_name = education.state_name;\n```\n\nThis query",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "length"
    }
  ],
  "usage": {
    "prompt_tokens": 35,
    "completion_tokens": 100,
    "total_tokens": 135,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": null
}
