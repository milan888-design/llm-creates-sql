LLM ollama creates SQL query

The following is an example of REST API using ollama
**Prompt:**

We're working with a bookstore database that tracks customer orders. Here are the relevant tables
and their structures:

```sql
CREATE TABLE customers (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE,
  phone VARCHAR(20)
);

CREATE TABLE orders (
  id SERIAL PRIMARY KEY,
  customer_id INTEGER REFERENCES customers(id),
  order_date DATE NOT NULL,
  total DECIMAL(10, 2) NOT NULL
);

CREATE TABLE order_items (
  id SERIAL PRIMARY KEY,
  order_id INTEGER REFERENCES orders(id),
  book_id INTEGER REFERENCES books(id),
  quantity INTEGER NOT NULL
);
```

**Table: books**

| Column Name | Data Type | Description |
| --- | --- | --- |
| id | SERIAL | Unique identifier for each book |
| title | VARCHAR(255) | Book title |
| author | VARCHAR(100) | Author's name |
| price | DECIMAL(10, 2) | Book price |

**Example Question:**

"What are the names of all customers who have placed an order with a total value greater than $50
and have ordered at least one book written by 'J.K. Rowling'? Order the results by the customer's
name."

-------------------------------------answer below
A SQL question!

To answer this, we'll need to join the `orders` table with the
`order_items` table to get the list of books each customer has
ordered, and then join that result with the `books` table to filter
for J.K. Rowling's books. Finally, we'll group by the customer's
name and apply the condition on order total.

Here's the SQL query:
```sql
SELECT c.name
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN order_items oi ON o.id = oi.order_id
JOIN books b ON oi.book_id = b.id
WHERE o.total > 50 AND EXISTS (
  SELECT 1 FROM order_items i2 WHERE i2.order_id = oi.order_id AND
i2.book_id IN (
    SELECT id FROM books WHERE author = 'J.K. Rowling'
  )
)
GROUP BY c.name
ORDER BY c.name;
```
Let me explain what's happening:

1. We start by joining the `customers` table with the `orders` table
on the `customer_id` column.
2. Then, we join the `orders` table with the `order_items` table on
the `order_id` column.
3. Next, we join the `order_items` table with the `books` table on
the `book_id` column.
4. We apply the condition on order total (`o.total > 50`) and then
use an `EXISTS` clause to filter for customers who have ordered at
least one book written by J.K. Rowling. The subquery inside the
`EXISTS` clause finds all book IDs written by J.K. Rowling, and we
use those IDs to match the `order_items` table.
5. Finally, we group the results by the customer's name (`c.name`)
and order them alphabetically.

This should give us the desired output: a list of customers who have
placed an order with a total value greater than $50 and have ordered
at least one book written by J.K. Rowling, sorted by their names.
